version: '3.8'

services:
  # =============================================================================
  # Database Services
  # =============================================================================
  
  # MySQL Primary (Write Operations)
  mysql-primary:
    image: mysql:8.0
    container_name: techpotli-mysql-primary
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-techpotli_root_2024}
      MYSQL_DATABASE: ${DB_NAME:-techpotli_production}
      MYSQL_USER: ${DB_USERNAME:-techpotli_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-techpotli_password_2024}
    ports:
      - "3306:3306"
    volumes:
      - mysql-primary-data:/var/lib/mysql
      - ./infrastructure/docker/mysql/primary.cnf:/etc/mysql/conf.d/mysql.cnf
      - ./infrastructure/docker/mysql/init:/docker-entrypoint-initdb.d
    networks:
      - techpotli-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # MySQL Read Replica 1
  mysql-replica-1:
    image: mysql:8.0
    container_name: techpotli-mysql-replica-1
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-techpotli_root_2024}
      MYSQL_DATABASE: ${DB_NAME:-techpotli_production}
      MYSQL_USER: ${DB_READ_USERNAME_1:-techpotli_read_user}
      MYSQL_PASSWORD: ${DB_READ_PASSWORD_1:-techpotli_read_password_2024}
    ports:
      - "3307:3306"
    volumes:
      - mysql-replica-1-data:/var/lib/mysql
      - ./infrastructure/docker/mysql/replica.cnf:/etc/mysql/conf.d/mysql.cnf
    networks:
      - techpotli-network
    depends_on:
      mysql-primary:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # MySQL Read Replica 2
  mysql-replica-2:
    image: mysql:8.0
    container_name: techpotli-mysql-replica-2
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-techpotli_root_2024}
      MYSQL_DATABASE: ${DB_NAME:-techpotli_production}
      MYSQL_USER: ${DB_READ_USERNAME_2:-techpotli_read_user}
      MYSQL_PASSWORD: ${DB_READ_PASSWORD_2:-techpotli_read_password_2024}
    ports:
      - "3308:3306"
    volumes:
      - mysql-replica-2-data:/var/lib/mysql
      - ./infrastructure/docker/mysql/replica.cnf:/etc/mysql/conf.d/mysql.cnf
    networks:
      - techpotli-network
    depends_on:
      mysql-primary:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # =============================================================================
  # Cache Services
  # =============================================================================
  
  # Redis (Single instance for development)
  redis:
    image: redis:7-alpine
    container_name: techpotli-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-techpotli_redis_2024}
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - techpotli-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      timeout: 3s
      retries: 5

  # Redis Cluster (for production simulation)
  redis-cluster-node-1:
    image: redis:7-alpine
    container_name: techpotli-redis-cluster-1
    command: redis-server --port 7000 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    ports:
      - "7000:7000"
    volumes:
      - redis-cluster-1-data:/data
    networks:
      - techpotli-network

  redis-cluster-node-2:
    image: redis:7-alpine
    container_name: techpotli-redis-cluster-2
    command: redis-server --port 7001 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    ports:
      - "7001:7001"
    volumes:
      - redis-cluster-2-data:/data
    networks:
      - techpotli-network

  redis-cluster-node-3:
    image: redis:7-alpine
    container_name: techpotli-redis-cluster-3
    command: redis-server --port 7002 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    ports:
      - "7002:7002"
    volumes:
      - redis-cluster-3-data:/data
    networks:
      - techpotli-network

  # =============================================================================
  # Message Queue Services
  # =============================================================================
  
  # Zookeeper (Required for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: techpotli-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - techpotli-network
    healthcheck:
      test: echo srvr | nc zookeeper 2181
      timeout: 10s
      retries: 5

  # Kafka Broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: techpotli-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - techpotli-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      timeout: 30s
      retries: 10

  # =============================================================================
  # Search Services
  # =============================================================================
  
  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: techpotli-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - cluster.name=techpotli-cluster
      - node.name=techpotli-node-1
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - techpotli-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      timeout: 30s
      retries: 10

  # =============================================================================
  # Storage Services
  # =============================================================================
  
  # MinIO (S3 compatible storage for development)
  minio:
    image: minio/minio:latest
    container_name: techpotli-minio
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
    volumes:
      - minio-data:/data
    networks:
      - techpotli-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      timeout: 10s
      retries: 5

  # =============================================================================
  # Authentication Services
  # =============================================================================
  
  # Keycloak
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    container_name: techpotli-keycloak
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN_USERNAME:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin}
      KC_DB: mysql
      KC_DB_URL: jdbc:mysql://mysql-primary:3306/keycloak
      KC_DB_USERNAME: ${DB_USERNAME:-techpotli_user}
      KC_DB_PASSWORD: ${DB_PASSWORD:-techpotli_password_2024}
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 8080
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HTTP_ENABLED: true
      KC_HEALTH_ENABLED: true
    ports:
      - "8080:8080"
    volumes:
      - keycloak-data:/opt/keycloak/data
    networks:
      - techpotli-network
    depends_on:
      mysql-primary:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      timeout: 30s
      retries: 10

  # =============================================================================
  # Monitoring Services
  # =============================================================================
  
  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: techpotli-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - techpotli-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      timeout: 10s
      retries: 5

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: techpotli-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin123}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./infrastructure/docker/grafana/provisioning:/etc/grafana/provisioning
      - ./infrastructure/docker/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - techpotli-network
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      timeout: 10s
      retries: 5

  # =============================================================================
  # Logging Services
  # =============================================================================
  
  # Logstash
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: techpotli-logstash
    ports:
      - "5044:5044"
      - "9600:9600"
    volumes:
      - ./infrastructure/docker/logstash/pipeline:/usr/share/logstash/pipeline
      - ./infrastructure/docker/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
    networks:
      - techpotli-network
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9600/_node/stats || exit 1"]
      timeout: 30s
      retries: 10

  # Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: techpotli-kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
      ELASTICSEARCH_USERNAME: elastic
      ELASTICSEARCH_PASSWORD: ${ELASTICSEARCH_PASSWORD:-techpotli_elastic_2024}
    networks:
      - techpotli-network
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      timeout: 30s
      retries: 10

  # =============================================================================
  # Tracing Services
  # =============================================================================
  
  # Jaeger
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: techpotli-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
      - "6831:6831/udp"
    environment:
      COLLECTOR_OTLP_ENABLED: true
    networks:
      - techpotli-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686/api/services"]
      timeout: 10s
      retries: 5

  # =============================================================================
  # API Gateway
  # =============================================================================
  
  # Kong API Gateway
  kong:
    image: kong:3.4
    container_name: techpotli-kong
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PROXY_LISTEN: 0.0.0.0:8000
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8443:8443"
      - "8444:8444"
    networks:
      - techpotli-network
    depends_on:
      kong-database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kong", "health"]
      timeout: 10s
      retries: 5

  # Kong Database
  kong-database:
    image: postgres:13
    container_name: techpotli-kong-database
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    volumes:
      - kong-database-data:/var/lib/postgresql/data
    networks:
      - techpotli-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      timeout: 10s
      retries: 5

  # =============================================================================
  # Load Balancer
  # =============================================================================
  
  # HAProxy
  haproxy:
    image: haproxy:2.8
    container_name: techpotli-haproxy
    ports:
      - "80:80"
      - "8404:8404"
    volumes:
      - ./infrastructure/docker/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    networks:
      - techpotli-network
    depends_on:
      - user-service
      - product-service
      - cart-service
      - order-service
      - payment-service
      - inventory-service
      - notification-service
      - search-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8404/stats"]
      timeout: 10s
      retries: 5

# =============================================================================
# Volumes
# =============================================================================
volumes:
  mysql-primary-data:
  mysql-replica-1-data:
  mysql-replica-2-data:
  redis-data:
  redis-cluster-1-data:
  redis-cluster-2-data:
  redis-cluster-3-data:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  elasticsearch-data:
  minio-data:
  keycloak-data:
  prometheus-data:
  grafana-data:
  kong-database-data:

# =============================================================================
# Networks
# =============================================================================
networks:
  techpotli-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
